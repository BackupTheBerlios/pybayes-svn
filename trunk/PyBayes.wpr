#!wing
#!version=2.0
##################################################################
# Wing IDE project file                                          #
##################################################################
[project attributes]
proj.file-list = [loc('PyBayes.wpr'),
                  loc('dist/doc/PKG-INFO-bayes'),
                  loc('dist/doc/PKG-INFO-graph'),
                  loc('dist/doc/README-bayes.txt'),
                  loc('dist/doc/README-graph.txt'),
                  loc('dist/doc/bayesnet.html'),
                  loc('dist/doc/changes-bayes'),
                  loc('dist/doc/changes-graph'),
                  loc('dist/doc/graph.html'),
                  loc('dist/lib/__init__.py'),
                  loc('dist/lib/bayesnet.py'),
                  loc('dist/lib/delegate.py'),
                  loc('dist/lib/distributions.py'),
                  loc('dist/lib/graph/__init__.py'),
                  loc('dist/lib/graph/graph.py'),
                  loc('dist/lib/graph/setup.py'),
                  loc('dist/lib/graph/setup_local.py'),
                  loc('dist/lib/inference.py'),
                  loc('dist/lib/learning.py'),
                  loc('dist/lib/potentials.py'),
                  loc('dist/lib/setup.py'),
                  loc('dist/lib/setup_local.py')]
proj.file-type = 'normal'
[user attributes]
debug.breakpoints = {loc('unknown:<untitled> #1'): {3: (0,
        None,
        1,
        0)},
                     loc('dist/lib/bayesnet.py'): {223: (0,
        None,
        1,
        0),
        230: (0,
              None,
              1,
              0),
        239: (0,
              None,
              1,
              0),
        245: (0,
              None,
              1,
              0)},
                     loc('temp.py'): {3: (0,
        None,
        1,
        0)}}
debug.debug-probe-history = {None: ['tuple([1,2,3])\n'],
                             loc('dist/lib/bayesnet.py'): ['G\n',
        'G.v\n',
        'strIndex\n',
        '"self.cpt["+index+"]=" + repr(value)\n',
        'self.cpt[index]\n',
        'self.cpt.cpt[0,0,0,:]\n',
        'self.cpt.cpt[0,0,0,:] == [-1, -1]\n',
        'self.cpt.cpt[0,0,0,:] == na.array([-1, -1])\n',
        'self.cpt.cpt[1,0,0,:]\n',
        'self.cpt.cpt[1,0,0,:]==na.array([100,100])\n',
        'self.cpt.cpt[1,1,0,:]\n',
        'self.cpt[1,1,0,:]\n',
        'index\n',
        'value\n'],
                             loc('temp.py'): ['a\n',
        'a[1,:,1]\n',
        'self\n',
        'arr\n']}
debug.shell-history = {None: ['import Random\n',
                              'import random\n',
                              'from random import *\n',
                              'randint(2)\n',
                              'randint(1,2)\n',
                              'randint(1,3)\n',
                              "d = {'a':1,'b':2,'c':3}\n",
                              "d[['a','b']]\n",
                              "d['a','b']\n",
                              "d[{'a','b'}]\n",
                              'd1 = {}\n',
                              'd1 = d1[key]=d[key] for key in d.keys() \n',
                              'd = {}\n',
                              'isinstance(d,dict)\n',
                              'isinstance(d,list)\n',
                              'isinstance(d,types.list)\n',
                              'isinstance(d,types.List)\n',
                              'isinstance(d,types.ListType)\n',
                              'isinstance(d,types.ArrayType)\n',
                              'import numarray\n',
                              'isinstance(d,ArrayType)\n',
                              'isinstance(d,numarray.ArrayType)\n',
                              'isinstance(d,set)\n',
                              'isinstance(d,types.SetType)\n',
                              'isinstance(d,types.Set)\n',
                              'isinstance(d,types.set)\n',
                              'isinstance(d,types.setType)\n',
                              'isinstance(d,types.DictType)\n',
                              "i = '1,:,1,'\n",
                              'i[:-1]\n',
                              "d['a']=1\n",
                              "d['b']=2\n",
                              "i += repr(d['a']) + ','\n",
                              "i += repr(d['b']) + ','\n",
                              'i\n',
                              'from numarray import *\n',
                              'a = array(range(9),shape=(2,3))\n',
                              'a = array(range(9),shape=(9,1))\n',
                              'a = array(range(9),shape=(1,9))\n',
                              'a = array(range(9),shape=(3,3))\n',
                              'a = array(range(48),shape(2,3,4,2))\n',
                              'a = array(range(48),shape=(2,3,4,2))\n',
                              'a[1,]\n',
                              'a[0,]\n',
                              'a[0,0,0,:]\n',
                              'allones(a[0,0,0,:] == array([0,1]))\n',
                              'a[0,0,0,:] == array([0,1])\n',
                              'all(a[0,0,0,:] == array([0,1]))\n',
                              'a[1,0,0,:]\n',
                              'a[1,0,0,1] = array([3,4])\n',
                              'try a[1,0,0,1] = array([3,4]):\n',
                              'catch ValueError:\n',
                              "d={'a':0,'b':0,'c':0}\n",
                              'd\n',
                              "d['a']\n",
                              'b=a[0,0,0,:]==array([0,1])\n',
                              'b\n',
                              'b and true\n',
                              'tuple([1,2,3])\n',
                              'import numarray as na\n',
                              'a = na.ones((2,3))\n',
                              'isinstance(a,ArrayType)\n',
                              'isinstance(a,na.ArrayType)\n',
                              'b = [1,2,3]\n',
                              'isinstance(b,na.ArrayType)\n',
                              's = set(1,2,3,4)\n',
                              's = set((1,2,3,4))\n',
                              's1 = set((3,4))\n',
                              's1 = set(((3,4),))\n',
                              's - s1\n',
                              'a = (3,4)\n',
                              'list(a)\n',
                              'set(a)\n',
                              'set(10\n',
                              ')\n',
                              'set(1)\n',
                              'set(set(a))\n',
                              'import types\n',
                              'isinstance(s,types.ListType)\n',
                              'isinstance(s,types.SequenceType)\n',
                              "set('hello')\n",
                              "set(list('hello'))\n",
                              "set(('hello',))\n",
                              'isinstance(s,types.TupleType)\n',
                              'isinstance(s,Set)\n',
                              'isinstance(s,set)\n',
                              'isinstance(list(s),list)\n',
                              'isinstance(list(s),tuple)\n',
                              'isinstance(tuple(s),tuple)\n',
                              'isinstance(tuple(s),(tuple,list))\n',
                              "set(list('hi','good'))\n",
                              "set(['hi','good'])\n",
                              "list('good')\n",
                              "a = ['good']\n",
                              'set([a])\n',
                              '[a]\n',
                              "a.append('hi')\n",
                              'a = []\n',
                              "a.append(['hi','good'])\n",
                              'a\n']}
edit.file-encoding = {loc('dist/lib/learning.py'): 'ISO-8859-1',
                      loc('temp.py'): 'ISO-8859-1'}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'mf5HahoaKCsewhQa8XsON5TyDH'\
        'Vq9Apv',
        'size-state': 'maximized',
        'type': 'dock',
        'view': {'area': 'tall',
                 'current_pages': [0,
                                   0],
                 'notebook_display': 'normal',
                 'notebook_percent': 0.26661392405063289,
                 'override_title': None,
                 'pagelist': [('indent',
                               'tall',
                               2,
                               {}),
                              ('project',
                               'tall',
                               0,
                               {'tree-state': {'tree-states': {'deep': {'col'\
        'umn-widths': [1.0],
        'expanded-nodes': [(0,),
                           (0,
                            1),
                           (0,
                            1,
                            0)],
        'selected-nodes': [(0,
                            1,
                            3)],
        'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('source-assistant',
                               'tall',
                               2,
                               {'docstring-during-complete': 0,
                                'wrap-lines': 1}),
                              ('browser',
                               'tall',
                               0,
                               {'all_tree_states': {loc('../../pbnt/trunk/dist/tests/GraphUnitTest.py'): {''\
        'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../../pbnt/trunk/dist/tests/GraphUnitTest.py'),
                      'DBNTestCase')]},
        loc('dist/lib/bayesnet.py'): {'column-widths': [1.0],
                                      'expanded-nodes': [],
                                      'selected-nodes': [[('class def',
        loc('dist/lib/bayesnet.py'),
        'BNet')]],
                                      'top-node': [('class def',
        loc('dist/lib/bayesnet.py'),
        'BNet')]},
        loc('../../../research/parsemarker.py'): {'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../../research/parsemarker.py'),
                      'R')]},
        loc('../../../../../usr/lib/python2.4/site-packages/numarray/generic.py'): {''\
        'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../../../usr/lib/python2.4/site-packages/numarray/generic.py'),
                      'ClassicUnpickler')]},
        loc('../../../../../usr/lib/python2.4/site-packages/numarray/numarraycore.py'): {''\
        'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../../../../usr/lib/python2.4/site-packages/numarray/numarraycore.py'),
                      'ArrayType')]},
        loc('../../../../../usr/lib/python2.4/site-packages/numarray/ufunc.py'): {''\
        'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../../../../usr/lib/python2.4/site-packages/numarray/ufunc.py'),
                      'CLIP')]},
        loc('../../../../../usr/lib/python2.4/site-packages/pyparsing.py'): {''\
        'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../../../../../usr/lib/python2.4/site-packages/pyparsing.py'),
                      'And')]},
        loc('../../../../../usr/lib/python2.4/unittest.py'): {'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../../../../usr/lib/python2.4/unittest.py'),
                      'False')]}},
                                'browse_mode': u'Current Module',
                                'follow-selection': 0,
                                'sort_mode': 'Alphabetically',
                                'visibility_options': {u'Derived Classes': 0,
        u'Imported': 0,
        u'Modules': 1}})],
                 'primary_view_state': {'area': 'wide',
        'current_pages': [5],
        'notebook_display': 'normal',
        'notebook_percent': 0.37651821862348178,
        'override_title': None,
        'pagelist': [('debug-io',
                      'wide',
                      1,
                      {'first-line': 0,
                       'selection_end': 3,
                       'selection_start': 3}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'first-line': 1,
                       'selection_end': 71,
                       'selection_start': 71}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {'current-domain': 0}),
                     ('debug-modules',
                      'wide',
                      1,
                      None),
                     ('python-shell',
                      'wide',
                      2,
                      {'first-line': 83,
                       'selection_end': 2186,
                       'selection_start': 2186}),
                     ('search',
                      'wide',
                      0,
                      {'action': 'search',
                       'file-set': None,
                       'mode': 'file',
                       'options': {'AutoBackground': 1,
                                   'AutoFind': 1,
                                   'AutoShowBatch': 0,
                                   'Fast': 1,
                                   'Incremental': 1,
                                   'InterpretBackslash': 0,
                                   'MatchCase': 0,
                                   'OmitBinary': 1,
                                   'Recursive': 1,
                                   'ReplaceOnDisk': 0,
                                   'Reverse': 0,
                                   'WholeWords': 0,
                                   'Wrapping': 1},
                       'prefix-file': 'short-file',
                       'prefix-lineno': 1,
                       'regex-flags': 46,
                       'replace-entry-expanded': False,
                       'replace-string': '',
                       'scope': ['open-files'],
                       'search-entry-expanded': False,
                       'search-string': 'class',
                       'search-style': 'text',
                       'starting-directory': '/home/elliot/'}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'column-widths': [0.39944649446494462,
        0.60055350553505538],
                                      'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}})],
        'primary_view_state': {'editor_states': {'bookmarks': ([(loc('dist/lib/potentials.py'),
        {'first-line': 0,
         'selection_end': 0,
         'selection_start': 0},
        1134426430.2248099),
        (loc('dist/lib/distributions.py'),
         {'first-line': 214,
          'selection_end': 6433,
          'selection_start': 6433},
         1134426432.351063),
        (loc('dist/lib/inference.py'),
         {'first-line': 61,
          'selection_end': 0,
          'selection_start': 0},
         1134426448.080255),
        (loc('dist/lib/potentials.py'),
         {'first-line': 0,
          'selection_end': 0,
          'selection_start': 0},
         1134678236.295336),
        (loc('dist/lib/distributions.py'),
         {'first-line': 476,
          'selection_end': 6433,
          'selection_start': 6433},
         1134678248.47715),
        (loc('dist/lib/inference.py'),
         {'first-line': 270,
          'selection_end': 17549,
          'selection_start': 17549},
         1134678275.487498),
        (loc('dist/lib/distributions.py'),
         {'first-line': 473,
          'selection_end': 6433,
          'selection_start': 6433},
         1134678440.844069),
        (loc('dist/lib/potentials.py'),
         {'first-line': 0,
          'selection_end': 0,
          'selection_start': 0},
         1134678615.702503),
        (loc('dist/lib/distributions.py'),
         {'first-line': 0,
          'selection_end': 6433,
          'selection_start': 6433},
         1134678851.8398161),
        (loc('dist/lib/inference.py'),
         {'first-line': 276,
          'selection_end': 17526,
          'selection_start': 17526},
         1134679734.6123381),
        (loc('dist/lib/bayesnet.py'),
         {'first-line': 37,
          'selection_end': 8157,
          'selection_start': 8157},
         1134679747.3142519),
        (loc('dist/lib/graph/graph.py'),
         {'first-line': 43,
          'selection_end': 22,
          'selection_start': 22},
         1134679763.3000081),
        (loc('dist/lib/delegate.py'),
         {'first-line': 0,
          'selection_end': 0,
          'selection_start': 0},
         1134679799.1699979),
        (loc('dist/lib/bayesnet.py'),
         {'first-line': 105,
          'selection_end': 8157,
          'selection_start': 8157},
         1134679817.9989531),
        (loc('dist/lib/inference.py'),
         {'first-line': 232,
          'selection_end': 17526,
          'selection_start': 17526},
         1134679841.1073301),
        (loc('dist/lib/bayesnet.py'),
         {'first-line': 30,
          'selection_end': 8157,
          'selection_start': 8157},
         1134679906.0403609),
        (loc('dist/lib/distributions.py'),
         {'first-line': 4,
          'selection_end': 6433,
          'selection_start': 6433},
         1134679937.187505),
        (loc('dist/lib/inference.py'),
         {'first-line': 272,
          'selection_end': 17583,
          'selection_start': 17583},
         1134679985.379127),
        (loc('dist/lib/distributions.py'),
         {'first-line': 138,
          'selection_end': 6433,
          'selection_start': 6433},
         1134680041.5299499),
        [loc('dist/lib/inference.py'),
         {'first-line': 272,
          'selection_end': 17583,
          'selection_start': 17583},
         1134680050.1604011]],
        19),
        'current-loc': loc('dist/lib/inference.py'),
        'editor-states': {loc('dist/lib/bayesnet.py'): {'first-line': 30,
        'selection_end': 8157,
        'selection_start': 8157},
                          loc('dist/lib/delegate.py'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                          loc('dist/lib/distributions.py'): {'first-line': 138,
        'selection_end': 6433,
        'selection_start': 6433},
                          loc('dist/lib/graph/graph.py'): {'first-line': 43,
        'selection_end': 22,
        'selection_start': 22},
                          loc('dist/lib/inference.py'): {'first-line': 272,
        'selection_end': 17605,
        'selection_start': 17605},
                          loc('dist/lib/potentials.py'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0}},
        'has-focus': True},
                               'open_files': [u'dist/lib/potentials.py',
        u'dist/lib/graph/graph.py',
        u'dist/lib/delegate.py',
        u'dist/lib/bayesnet.py',
        u'dist/lib/distributions.py',
        u'dist/lib/inference.py']},
        'split_percents': {},
        'splits': 1,
        'tab_location': 'top',
        'user_data': {}},
                 'split_percents': {0: 0.65540540540540537},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (0,
                         0,
                         968,
                         688)}]}
guimgr.recent-documents = [loc('dist/lib/inference.py'),
                           loc('dist/lib/distributions.py'),
                           loc('dist/lib/bayesnet.py'),
                           loc('dist/lib/delegate.py'),
                           loc('dist/lib/graph/graph.py'),
                           loc('dist/lib/potentials.py')]
guimgr.visual-state = {loc('PyBayes.wpr'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('dist/lib/graph/setup.py'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('../../../research/scripts/emgbci/trunk/rip_matcopywrite.py'): {''\
        'first-line': 0,
        'selection_end': 634,
        'selection_start': 634},
                       loc('../../../../../usr/lib/python2.4/site-packages/numarray/generic.py'): {''\
        'first-line': 560,
        'selection_end': 20298,
        'selection_start': 20298},
                       loc('unknown:<untitled> #2'): {'first-line': 387,
        'selection_end': 14196,
        'selection_start': 14196},
                       loc('unknown:<untitled> #3'): {'first-line': 0,
        'selection_end': 4,
        'selection_start': 4},
                       loc('unknown:<untitled> #4'): {'first-line': 0,
        'selection_end': 4,
        'selection_start': 4},
                       loc('unknown:<untitled> #5'): {'first-line': 0,
        'selection_end': 4,
        'selection_start': 4},
                       loc('dist/lib/__init__.py'): {'first-line': 0,
        'selection_end': 26,
        'selection_start': 26},
                       loc('dist/lib/graph/__init__.py'): {'first-line': 0,
        'selection_end': 34,
        'selection_start': 34},
                       loc('temp.py'): {'first-line': 0,
        'selection_end': 43,
        'selection_start': 43},
                       loc('../../../research/scripts/emgbci/trunk/testing/testrip.py'): {''\
        'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('../../../../../usr/lib/python2.4/site-packages/numarray/numarraycore.py'): {''\
        'first-line': 1763,
        'selection_end': 61545,
        'selection_start': 61545},
                       loc('../../../../../usr/lib/python2.4/site-packages/numarray/ufunc.py'): {''\
        'first-line': 286,
        'selection_end': 10931,
        'selection_start': 10931},
                       loc('../../../../../usr/lib/python2.4/unittest.py'): {''\
        'first-line': 405,
        'selection_end': 14943,
        'selection_start': 14943}}
proj.env-vars = {None: ('default',
                        ['']),
                 loc('dist/lib/bayesnet.py'): ('project',
        ['']),
                 loc('temp.py'): ('project',
                                  ['']),
                 loc('unknown:<untitled> #6'): ('project',
        [''])}
proj.preferred-indent-style = 'spaces-only'
search.search-history = ['class',
                         'object',
                         'class MCMCT',
                         'class MCMC',
                         'class ',
                         'class BVertex',
                         'class BV',
                         'class B',
                         'Triangulate',
                         'T',
                         'isinstance',
                         'in',
                         '__getitem__',
                         '__getitem',
                         '__gert',
                         'RawCPT',
                         'r',
                         'all_v',
                         'all',
                         'FindCorrespond']
