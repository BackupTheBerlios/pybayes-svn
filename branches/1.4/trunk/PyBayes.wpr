#!wing
#!version=2.0
##################################################################
# Wing IDE project file                                          #
##################################################################
[project attributes]
proj.file-list = [loc('PyBayes.wpr'),
                  loc('dist/doc/PKG-INFO-bayes'),
                  loc('dist/doc/PKG-INFO-graph'),
                  loc('dist/doc/README-bayes.txt'),
                  loc('dist/doc/README-graph.txt'),
                  loc('dist/doc/bayesnet.html'),
                  loc('dist/doc/changes-bayes'),
                  loc('dist/doc/changes-graph'),
                  loc('dist/doc/graph.html'),
                  loc('dist/lib/__init__.py'),
                  loc('dist/lib/bayesnet.py'),
                  loc('dist/lib/delegate.py'),
                  loc('dist/lib/distributions.py'),
                  loc('dist/lib/graph.py'),
                  loc('dist/lib/inference.py'),
                  loc('dist/lib/learning.py'),
                  loc('dist/lib/potentials.py'),
                  loc('dist/lib/setup.py'),
                  loc('dist/lib/setup_local.py'),
                  loc('dist/lib/table.py')]
proj.file-type = 'normal'
[user attributes]
debug.breakpoints = {loc('unknown:<untitled> #1'): {3: (0,
        None,
        1,
        0)},
                     loc('temp.py'): {3: (0,
        None,
        1,
        0)}}
debug.debug-probe-history = {None: ['tuple([1,2,3])\n',
                                    'a\n',
                                    'v.family\n',
                                    'self\n'],
                             loc('dist/lib/bayesnet.py'): ["cluster = self.c"\
        "lusterdict['c']\n",
        'cluster\n',
        'cluster.vertices\n',
        'names = [v.name for v in cluster.vertices]\n',
        'vv\n',
        'l\n',
        'c.cpt\n',
        'c.vertices\n',
        'res.Normalise()\n',
        'len(self.vertices)\n',
        'len(c.vertices)\n',
        'self.clusterdict\n',
        'names = [v.name for in c.vertices]\n',
        'self.name\n',
        'self.in_v\n',
        'len(v.family)\n',
        'res\n',
        "JT.Marginalise('r')\n",
        "JT.Marginalise('c')\n",
        "JT.Marginalise('s')\n",
        'print v.distribution\n',
        'name\n',
        'table\n',
        'isinstance(v.distribution,table.Table)\n',
        'isinstance(c.potential,table.Table)\n',
        'shape\n',
        'c\n',
        'self.potential.shape\n',
        'e.potential.shape\n',
        'self\n',
        'oldphiR\n',
        'c1=self.v.values()[0]\n',
        'c2=self.v.values()[1]\n',
        'names = [v.name for v in c1.vertices]\n',
        'names2 = [v.name for v in c2.vertices]\n',
        'names2\n',
        'self.v.values()\n',
        'c1.potentials\n',
        'c1.potential\n',
        'c2.potential\n',
        'names = [v.name for v in self.vertices]\n',
        'names = [v.name for v in c.vertices]\n',
        'names\n',
        'e\n',
        'self.potential\n',
        'e.potential.cpt\n',
        'e.potential\n',
        'olphiR\n',
        'newphiR.copy()\n',
        'tmp = copy.copy(newphiR)\n',
        'newphiR\n',
        'newphiR.cpt\n',
        'tmp.cpt\n',
        'c.potential.assocname\n',
        'na.sum(c.potential[:,0,:])\n',
        'c.potential[:,0,:]\n',
        'na.sum(na.sum(c.potential[:,0,:]))\n',
        'na.sum(na.sum(c.potential[:,1,:]))\n',
        't=na.sum(na.sum(c.potential[:,1,:]))\n',
        'f=na.sum(na.sum(c.potential[:,0,:]))\n',
        'tot = t+f\n',
        'tot\n',
        't/tot\n',
        'f/tot\n',
        'v.family\n',
        'v.family[0].name\n',
        'v.family[1].name\n',
        'v.family[2].name\n',
        'v.distribution.names_list\n',
        'v.distribution\n',
        'c.potential.cpt\n',
        'v.distribution.names\n',
        'c.names\n',
        'v\n',
        'c.potential.names\n',
        'v.distribution.cpt[1,0]\n',
        'v.distribution.cpt[1,1]\n',
        'c.potential.names_list\n',
        'c.potential[0,1,1]\n',
        'c.potential[1,0,0]\n',
        'c.potential[1,0,1]\n',
        'c.potential[1,1,0]\n',
        'c.potential[1,1,1]\n',
        'v.name\n',
        'v.distribution.cpt.names_list\n',
        'v.distribution.cpt.assocdim\n',
        'v.distribution.assocdim\n',
        'c.potential.assocdim\n',
        'c.potential[0,0,0]\n',
        'c.potential[0,1,0]\n',
        'c.potential\n',
        'c.potential[0,0,1]\n',
        'v.distribution.cpt\n',
        'v.distribution.cpt[0,1]\n',
        "tmp = Table(['a','b','c'],[2,2,2],[.4,.1,.4,.1,.1,.4,.1,.4]) \n",
        'import table\n',
        "tmp = table.Table(['a','b','c'],[2,2,2],[.4,.1,.4,.1,.1,.4,.1,.4]) "\
        "\n",
        'tmp\n',
        'b\n',
        'b.cpt\n'],
                             loc('dist/lib/inference.py'): ['self\n',
        'pvals\n',
        'self[:]\n',
        'self.cpt[:]\n',
        'z=[]\n',
        'z.append(slice(None,None,None))\n',
        'z\n',
        'self[z]\n',
        'self.cpt[z]\n',
        'self.cpt\n',
        'numIndex\n',
        'self.cpt[numIndex]\n',
        'dist\n',
        'v.distribution\n',
        'v.distribution.isAdjustable\n',
        'v.distribution.family\n'],
                             loc('dist/lib/table.py'): ['self._shape\n',
        'type\n',
        'inarg\n',
        'inargs\n',
        'len(inargs)\n',
        'len(inarg\n',
        ')\n',
        'self.a += 1\n',
        'self.a = 3\n',
        "self.a = ones(names,shape,type='Float32')\n",
        'self.a += na.ones((2,3,4))\n',
        'self.a *= 3\n',
        'self.a[1,1,1] = 4\n',
        'self.a[1,1,1]\n',
        'index\n',
        'self.a[:]\n',
        'self.a[:] = na.ones((2,2,2))\n',
        'self.a[:] *= [1.0/N for N in range(na.product(self.shape))]\n',
        'self.a[:] *= [1.0/N for N in range(na.product(self.a.shape))]\n',
        'self.a[:] *= 1.0/na.product(self.a.shape)\n',
        'self.a\n',
        'na.NewAxis\n',
        'g = na.NewAxis\n',
        'g\n',
        'self.a[...,na.NewAxis]\n',
        'self.a.rank\n',
        'a[0,1]\n',
        'b[0,2]\n',
        'b[0,3]\n',
        'a[0,2]\n',
        'a[1,0]\n',
        'a[1,1]\n',
        'b[1,1]\n',
        'b[1,2]\n',
        'b[1,0]\n',
        'a[1,2]\n',
        'b[1,3]\n',
        '.names_list\n',
        'b.names_list\n',
        'a*b\n',
        'other\n',
        'self\n',
        'other.assocdim\n',
        'varb\n',
        'cptb.rank\n',
        'isinstance(a.names,set)\n',
        'a.names\n',
        'a.shape\n',
        'newDims\n',
        'self.names\n',
        'other.names\n',
        'b.names\n',
        'self.cpt[0,0,0]\n',
        'self.cpt[0,0,1]\n',
        'self.cpt[0,0,2]\n',
        'self.cpt[0,0,3]\n',
        'self.cpt.transpose((0,2,1))\n',
        'self.cpt[0,1,0]\n',
        'self.cpt.transpose((1,0,2))\n',
        'cptb.transpose((1,0,2))\n',
        'self.cpt.shape\n',
        'cptb.transpose(0,2,1)\n',
        'cptb.transpose((0,2,1))\n',
        'cptb\n',
        'cptb.shape\n',
        'self.shape\n',
        'b.shape\n',
        'cptb[0,1]\n',
        'b[0,1]\n',
        'cptb[1,0]\n',
        'cptb[1,0,0]\n',
        'b.assocdim\n',
        'self.assocdim\n',
        'self.cpt.transpose((2,1,0))\n',
        'self.cpt\n',
        'self.cpt * cptb\n',
        'a=self.cpt * cptb\n',
        'a.transpose((2,1,0))\n',
        'a.assocdim\n',
        'a[0,0,0]\n',
        'a[0,0,1]\n',
        'a[0,1,0]\n',
        'a[0,1,1]\n',
        'a[1,0,0]\n',
        'a[1,0,1]\n',
        'a[1,1,0]\n',
        'a[1,1,1]\n',
        'a.names_list\n',
        'a.cpt\n',
        'a.cpt.flat == c.cpt.flat\n',
        "a.transpose(['r','s','c'])\n",
        'c\n',
        'a\n',
        'b\n',
        'b.flat\n',
        'b.cpt.flat\n',
        'a.cpt.flat == b.cpt.flat\n',
        'a.flat\n'],
                             loc('temp.py'): ['a\n',
        'a[1,:,1]\n',
        'self\n',
        'arr\n']}
debug.err-values = {None: {},
                    loc('dist/lib/bayesnet.py'): {}}
debug.shell-history = {None: ['a[1,0,0]\n',
                              'a[1,0,1]\n',
                              'a[1,1,0]\n',
                              'a[1,1,1]\n',
                              '.4.5\n',
                              '.4/.5\n',
                              '.1/.9\n',
                              '.1/.5\n',
                              '.4/.9\n',
                              '.4/.1\n',
                              '.4/.2\n',
                              '.4/.8\n',
                              '.1/.8\n',
                              '.1/.2\n',
                              'b = a.copy()\n',
                              'na.alltrue(a == b)\n',
                              'na.alltrue(a.flat == b.flat)\n',
                              'a == .02\n',
                              'a == .08\n',
                              'a = set([1,2,3])\n',
                              'b = set([3,2,1])\n',
                              'a == b\n',
                              "d={'a':0,'b':1}\n",
                              'isinstance(d,dict)\n',
                              "a = na.array([.2,.09,.2,.01,.05,.35999998,.05"\
                              ",.04],shape=(2,2,2),type='Float32')\n",
                              "b = na.array([.4,.1,.4,.1,.1,.4,.1,.4],shape="\
                              "(2,2,2),type='Float32')\n",
                              'b.transpose((1,2,0))\n',
                              "c = na.array([.5,.9,.5,.1],shape=(2,2),type='"\
                              "Float32')\n",
                              'c = c[...,na.NewAxis]\n',
                              'c.shape\n',
                              'd = b/c\n',
                              'd = b*c\n',
                              'd.transpose((2,0,1))\n',
                              'a.flat\n',
                              'd.flat\n',
                              'd.flat == d.flat\n',
                              'e = d.copy()\n',
                              'd.flat == e.flat\n',
                              'd == e\n',
                              'na.all(d == e)\n',
                              'd.shape\n',
                              'f = na.ones((2,2))\n',
                              'f\n',
                              'g = na.ones((2,1))\n',
                              'na.all(f == g)\n',
                              'a.flat == d.flat\n',
                              'na.all(a==d)\n',
                              'd[1,0,1]\n',
                              'd[1,0,1]=.36\n',
                              'd\n',
                              'na.allclose(a,d,atol=.00001)\n',
                              'na.allclose(a,d,atol=.00000001)\n',
                              'na.allclose(a,d,atol=.000000001)\n',
                              'na.allclose(a,d,atol=.0000000001)\n',
                              'na.allclose(a,d,atol=.00000000001)\n',
                              'd[1,0,1]=.37\n',
                              'na.allclose(a,d,atol=0)\n',
                              'a=set([1,2,3])\n',
                              'b=set([1,2])\n',
                              'b=set([1,2,3])\n',
                              'b=set([1,2,3,4])\n',
                              'not(a-b)\n',
                              'a = {}\n',
                              "a = {'a':1}\n",
                              'len(a)\n',
                              'a.values()\n',
                              'a.keys()\n',
                              'b - a.keys()\n',
                              'import numarray as na\n',
                              'a = na.array([1])\n',
                              'a[1:]\n',
                              'for i in a:\n',
                              'for i in a[1:]:\n',
                              '\tprint i\n',
                              'a = na.array(range(16),shape=(2,2,4))\n',
                              'b.shape\n',
                              'a.shape\n',
                              'b = a\n',
                              'b = na.sum(b,axis=1)[...,na.NewAxis]\n',
                              'a[0,:,:]\n',
                              'a0 = na.sum(a[0,:,;])\n',
                              'a0 = na.sum(a)\n',
                              'a0 = na.sum(a[0,:,:])\n',
                              'a0 = na.sum(a0)\n',
                              'a0\n',
                              'a1 = na.sum([a[1,:,:])\n',
                              'a1 = na.sum(a[1,:,:])\n',
                              'a1 = na.sum(a1)\n',
                              'a1\n',
                              'a\n',
                              "a = na.array(range(16),shape=(2,2,4),type='Fl"\
                              "oat32')\n",
                              'b=a\n',
                              'b = na.sum(b,axis=0)[...,na.NewAxis]\n',
                              'b\n',
                              'a / b\n',
                              'a /= b\n',
                              'a[0,:,;].sum()\n',
                              'a[0,:,:].sum()\n',
                              'a[1,:,:].sum()\n',
                              '.233333333 + .76666666666\n']}
debug.var-col-widths = [0.31060606060606061,
                        0.68939393939393945]
edit.file-encoding = {loc('dist/lib/learning.py'): 'ISO-8859-1',
                      loc('temp.py'): 'ISO-8859-1'}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'mf5HahoaKCsewhQa8XsON5TyDH'\
        'Vq9Apv',
        'size-state': 'maximized',
        'type': 'dock',
        'view': {'area': 'tall',
                 'current_pages': [0,
                                   0],
                 'notebook_display': 'normal',
                 'notebook_percent': 0.16455696202531644,
                 'override_title': None,
                 'pagelist': [('indent',
                               'tall',
                               2,
                               {}),
                              ('project',
                               'tall',
                               0,
                               {'tree-state': {'tree-states': {'deep': {'col'\
        'umn-widths': [1.0],
        'expanded-nodes': [(0,),
                           (0,
                            1)],
        'selected-nodes': [(0,
                            1,
                            0)],
        'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('source-assistant',
                               'tall',
                               2,
                               {'docstring-during-complete': 0,
                                'wrap-lines': 1}),
                              ('browser',
                               'tall',
                               0,
                               {'all_tree_states': {loc('dist/lib/bayesnet.py'): {''\
        'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [[('class def',
                             loc('dist/lib/bayesnet.py'),
                             'BNet')]],
        'top-node': [('class def',
                      loc('dist/lib/bayesnet.py'),
                      'BNet')]},
        loc('../../pbnt/trunk/dist/tests/GraphUnitTest.py'): {'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../../pbnt/trunk/dist/tests/GraphUnitTest.py'),
                      'DBNTestCase')]},
        loc('../../../research/parsemarker.py'): {'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../../research/parsemarker.py'),
                      'R')]},
        loc('../../../../../usr/lib/python2.4/site-packages/numarray/generic.py'): {''\
        'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../../../usr/lib/python2.4/site-packages/numarray/generic.py'),
                      'ClassicUnpickler')]},
        loc('../../../../../usr/lib/python2.4/site-packages/numarray/numarraycore.py'): {''\
        'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../../../../usr/lib/python2.4/site-packages/numarray/numarraycore.py'),
                      'ArrayType')]},
        loc('../../../../../usr/lib/python2.4/site-packages/numarray/ufunc.py'): {''\
        'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../../../../usr/lib/python2.4/site-packages/numarray/ufunc.py'),
                      'CLIP')]},
        loc('../../../../../usr/lib/python2.4/site-packages/pyparsing.py'): {''\
        'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../../../../../usr/lib/python2.4/site-packages/pyparsing.py'),
                      'And')]},
        loc('../../../../../usr/lib/python2.4/unittest.py'): {'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../../../../usr/lib/python2.4/unittest.py'),
                      'False')]}},
                                'browse_mode': u'Current Module',
                                'follow-selection': 0,
                                'sort_mode': 'Alphabetically',
                                'visibility_options': {u'Derived Classes': 0,
        u'Imported': 0,
        u'Modules': 1}})],
                 'primary_view_state': {'area': 'wide',
        'current_pages': [0],
        'notebook_display': 'normal',
        'notebook_percent': 0.34682860998650478,
        'override_title': None,
        'pagelist': [('debug-io',
                      'wide',
                      1,
                      {'first-line': 46,
                       'selection_end': 1621,
                       'selection_start': 1621}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'first-line': 0,
                       'selection_end': 113,
                       'selection_start': 113}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {'current-domain': 0}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'first-line': 190,
                       'selection_end': 4824,
                       'selection_start': 4824}),
                     ('search',
                      'wide',
                      0,
                      {'action': 'search',
                       'file-set': None,
                       'mode': 'file',
                       'options': {'AutoBackground': 1,
                                   'AutoFind': 1,
                                   'AutoShowBatch': 0,
                                   'Fast': 1,
                                   'Incremental': 1,
                                   'InterpretBackslash': 0,
                                   'MatchCase': 0,
                                   'OmitBinary': 1,
                                   'Recursive': 1,
                                   'ReplaceOnDisk': 0,
                                   'Reverse': 0,
                                   'WholeWords': 0,
                                   'Wrapping': 1},
                       'prefix-file': 'short-file',
                       'prefix-lineno': 1,
                       'regex-flags': 46,
                       'replace-entry-expanded': False,
                       'replace-string': '',
                       'scope': ['open-files'],
                       'search-entry-expanded': False,
                       'search-string': 'JoinTree',
                       'search-style': 'text',
                       'starting-directory': '/home/elliot/'}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [('eval',
        'v.name'),
                                       ('eval',
        'vv.name'),
                                       ('eval',
        'self.potential.names')],
                       'tree-state': {'column-widths': [0.31573157315731576,
        0.6842684268426843],
                                      'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}})],
        'primary_view_state': {'editor_states': {'bookmarks': ([(loc('dist/lib/distributions.py'),
        {'first-line': 57,
         'selection_end': 2432,
         'selection_start': 2432},
        1138851468.04726),
        (loc('dist/lib/table.py'),
         {'first-line': 76,
          'selection_end': 2748,
          'selection_start': 2748},
         1138851521.903131),
        (loc('dist/lib/inference.py'),
         {'first-line': 651,
          'selection_end': 24823,
          'selection_start': 24823},
         1138851529.925303),
        (loc('dist/lib/distributions.py'),
         {'first-line': 57,
          'selection_end': 2525,
          'selection_start': 2525},
         1138851532.812819),
        (loc('dist/lib/inference.py'),
         {'first-line': 651,
          'selection_end': 24823,
          'selection_start': 24823},
         1138851541.20293),
        (loc('dist/lib/distributions.py'),
         {'first-line': 105,
          'selection_end': 4376,
          'selection_start': 4376},
         1138851544.8986349),
        (loc('dist/lib/inference.py'),
         {'first-line': 7,
          'selection_end': 13968,
          'selection_start': 13968},
         1138851562.242846),
        (loc('dist/lib/bayesnet.py'),
         {'first-line': 232,
          'selection_end': 8088,
          'selection_start': 8088},
         1138851762.08708),
        (loc('dist/lib/inference.py'),
         {'first-line': 27,
          'selection_end': 25977,
          'selection_start': 25977},
         1138851768.3802731),
        (loc('dist/lib/distributions.py'),
         {'first-line': 20,
          'selection_end': 4376,
          'selection_start': 4376},
         1138852012.2874701),
        (loc('dist/lib/inference.py'),
         {'first-line': 27,
          'selection_end': 1204,
          'selection_start': 1204},
         1138852028.4083509),
        (loc('dist/lib/distributions.py'),
         {'first-line': 100,
          'selection_end': 4376,
          'selection_start': 4376},
         1138852046.9838049),
        (loc('dist/lib/table.py'),
         {'first-line': 46,
          'selection_end': 1882,
          'selection_start': 1882},
         1138852094.288976),
        (loc('dist/lib/distributions.py'),
         {'first-line': 19,
          'selection_end': 4376,
          'selection_start': 4376},
         1138852111.0045891),
        (loc('dist/lib/inference.py'),
         {'first-line': 5,
          'selection_end': 1204,
          'selection_start': 1204},
         1138852125.3463471),
        (loc('dist/lib/distributions.py'),
         {'first-line': 23,
          'selection_end': 1359,
          'selection_start': 1359},
         1138852151.887434),
        (loc('dist/lib/inference.py'),
         {'first-line': 18,
          'selection_end': 1164,
          'selection_start': 1164},
         1138852168.1215031),
        (loc('dist/lib/bayesnet.py'),
         {'first-line': 258,
          'selection_end': 9425,
          'selection_start': 9425},
         1138852200.3985839),
        (loc('dist/lib/table.py'),
         {'first-line': 46,
          'selection_end': 1882,
          'selection_start': 1882},
         1138852410.2500319),
        [loc('dist/lib/bayesnet.py'),
         {'first-line': 258,
          'selection_end': 9425,
          'selection_start': 9425},
         1138852420.7786231]],
        19),
        'current-loc': loc('dist/lib/bayesnet.py'),
        'editor-states': {loc('dist/lib/bayesnet.py'): {'first-line': 237,
        'selection_end': 9507,
        'selection_start': 9486},
                          loc('dist/lib/delegate.py'): {'first-line': 0,
        'selection_end': 21,
        'selection_start': 0},
                          loc('dist/lib/distributions.py'): {'first-line': 23,
        'selection_end': 1359,
        'selection_start': 1359},
                          loc('dist/lib/graph.py'): {'first-line': 359,
        'selection_end': 13976,
        'selection_start': 13976},
                          loc('dist/lib/inference.py'): {'first-line': 18,
        'selection_end': 1164,
        'selection_start': 1164},
                          loc('dist/lib/potentials.py'): {'first-line': 17,
        'selection_end': 84,
        'selection_start': 84},
                          loc('dist/lib/table.py'): {'first-line': 46,
        'selection_end': 1882,
        'selection_start': 1882}},
        'has-focus': True},
                               'open_files': [u'dist/lib/delegate.py',
        u'dist/lib/graph.py',
        u'dist/lib/potentials.py',
        u'dist/lib/distributions.py',
        u'dist/lib/inference.py',
        u'dist/lib/table.py',
        u'dist/lib/bayesnet.py']},
        'split_percents': {},
        'splits': 1,
        'tab_location': 'top',
        'user_data': {}},
                 'split_percents': {0: 0.65540540540540537},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (0,
                         0,
                         968,
                         688)}]}
guimgr.recent-documents = [loc('dist/lib/bayesnet.py'),
                           loc('dist/lib/table.py'),
                           loc('dist/lib/inference.py'),
                           loc('dist/lib/distributions.py'),
                           loc('dist/lib/potentials.py'),
                           loc('dist/lib/graph.py')]
guimgr.visual-state = {loc('../../../../pbnt/trunk/dist/lib/pbnt/Utilities/GraphUtilities.py'): {''\
        'first-line': 178,
        'selection_end': 0,
        'selection_start': 0},
                       loc('../../../../pbnt/trunk/dist/lib/pbnt/Utilities/Utilities.py'): {''\
        'first-line': 30,
        'selection_end': 1697,
        'selection_start': 1697},
                       loc('../../../trunk/dist/lib/distributions.py'): {'fi'\
        'rst-line': 15,
        'selection_end': 0,
        'selection_start': 0},
                       loc('unknown:<untitled> #2'): {'first-line': 387,
        'selection_end': 14196,
        'selection_start': 14196},
                       loc('unknown:<untitled> #3'): {'first-line': 0,
        'selection_end': 4,
        'selection_start': 4},
                       loc('unknown:<untitled> #4'): {'first-line': 0,
        'selection_end': 4,
        'selection_start': 4},
                       loc('unknown:<untitled> #5'): {'first-line': 0,
        'selection_end': 4,
        'selection_start': 4},
                       loc('unknown:<untitled> #6'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('../../../../pbnt/trunk/dist/lib/pbnt/Distribution.py'): {''\
        'first-line': 59,
        'selection_end': 3535,
        'selection_start': 3526},
                       loc('../../../../pbnt/trunk/dist/lib/pbnt/Graph.py'): {''\
        'first-line': 113,
        'selection_end': 4869,
        'selection_start': 4860},
                       loc('../../../../pbnt/trunk/dist/lib/pbnt/Inference.py'): {''\
        'first-line': 254,
        'selection_end': 12787,
        'selection_start': 12778},
                       loc('PyBayes.wpr'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('dist/lib/__init__.py'): {'first-line': 0,
        'selection_end': 26,
        'selection_start': 26},
                       loc('dist/lib/graph/__init__.py'): {'first-line': 0,
        'selection_end': 34,
        'selection_start': 34},
                       loc('dist/lib/graph/setup.py'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('temp.py'): {'first-line': 0,
        'selection_end': 43,
        'selection_start': 43},
                       loc('../../../research/scripts/emgbci/trunk/rip_matcopywrite.py'): {''\
        'first-line': 0,
        'selection_end': 634,
        'selection_start': 634},
                       loc('../../../research/scripts/emgbci/trunk/testing/testrip.py'): {''\
        'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('../../../../../usr/lib/python2.4/site-packages/numarray/generic.py'): {''\
        'first-line': 560,
        'selection_end': 20298,
        'selection_start': 20298},
                       loc('../../../../../usr/lib/python2.4/site-packages/numarray/numarraycore.py'): {''\
        'first-line': 385,
        'selection_end': 12460,
        'selection_start': 12449},
                       loc('../../../../../usr/lib/python2.4/site-packages/numarray/ufunc.py'): {''\
        'first-line': 428,
        'selection_end': 13421,
        'selection_start': 13421},
                       loc('../../../../../usr/lib/python2.4/unittest.py'): {''\
        'first-line': 405,
        'selection_end': 14943,
        'selection_start': 14943},
                       loc('../../../../../../../usr/lib/python2.4/site-packages/numarray/generic.py'): {''\
        'first-line': 584,
        'selection_end': 21528,
        'selection_start': 21528},
                       loc('../../../../../../../usr/lib/python2.4/site-packages/numarray/numarraycore.py'): {''\
        'first-line': 691,
        'selection_end': 24457,
        'selection_start': 24457}}
proj.env-vars = {None: ('default',
                        ['']),
                 loc('dist/lib/bayesnet.py'): ('project',
        ['']),
                 loc('dist/lib/distributions.py'): ('project',
        ['']),
                 loc('dist/lib/potentials.py'): ('project',
        ['']),
                 loc('unknown:<untitled> #7'): ('project',
        ['']),
                 loc('dist/lib/inference.py'): ('project',
        ['']),
                 loc('dist/lib/table.py'): ('project',
        ['']),
                 loc('temp.py'): ('project',
                                  [''])}
proj.preferred-indent-style = 'spaces-only'
search.search-history = ['JoinTree',
                         'BNet.v',
                         'BNet.',
                         'BNet',
                         'B',
                         'topological',
                         'topo',
                         '/',
                         'findCorrespond',
                         'normalize',
                         'normali',
                         'Marginalise',
                         'Margin',
                         'Mar',
                         'MessagePass',
                         'potential/',
                         'potential /',
                         'potential',
                         'family',
                         'clusterdict']
