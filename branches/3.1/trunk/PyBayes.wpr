#!wing
#!version=2.0
##################################################################
# Wing IDE project file                                          #
##################################################################
[project attributes]
proj.file-list = [loc('PyBayes.wpr'),
                  loc('dist/doc/PKG-INFO-bayes'),
                  loc('dist/doc/PKG-INFO-graph'),
                  loc('dist/doc/README-bayes.txt'),
                  loc('dist/doc/README-graph.txt'),
                  loc('dist/doc/bayesnet.html'),
                  loc('dist/doc/changes-bayes'),
                  loc('dist/doc/changes-graph'),
                  loc('dist/doc/graph.html'),
                  loc('dist/lib/__init__.py'),
                  loc('dist/lib/bayesnet.py'),
                  loc('dist/lib/delegate.py'),
                  loc('dist/lib/distributions.py'),
                  loc('dist/lib/inference.py'),
                  loc('dist/lib/learning.py'),
                  loc('dist/lib/potentials.py'),
                  loc('dist/lib/setup.py'),
                  loc('dist/lib/setup_local.py'),
                  loc('dist/lib/table.py')]
proj.file-type = 'normal'
[user attributes]
debug.breakpoints = {loc('unknown:<untitled> #1'): {3: (0,
        None,
        1,
        0)},
                     loc('temp.py'): {3: (0,
        None,
        1,
        0)}}
debug.debug-probe-history = {None: ['tuple([1,2,3])\n',
                                    'a\n'],
                             loc('dist/lib/bayesnet.py'): ['G.v\n',
        'strIndex\n',
        '"self.cpt["+index+"]=" + repr(value)\n',
        'self.cpt[index]\n',
        'self.cpt.cpt[0,0,0,:]\n',
        'self.cpt.cpt[0,0,0,:] == [-1, -1]\n',
        'self.cpt.cpt[0,0,0,:] == na.array([-1, -1])\n',
        'self.cpt.cpt[1,0,0,:]\n',
        'self.cpt.cpt[1,0,0,:]==na.array([100,100])\n',
        'self.cpt.cpt[1,1,0,:]\n',
        'self.cpt[1,1,0,:]\n',
        'index\n',
        'value\n',
        'G\n',
        'print G\n',
        'self.sizes\n',
        'cpt\n',
        'self.family\n',
        'a = self.family[0]\n',
        'a.nvalues\n'],
                             loc('dist/lib/inference.py'): ['self.sizes\n',
        'cpt\n',
        'self.family\n',
        'a=self.family[0]\n',
        'a\n',
        'a.nvalues\n',
        'self.c\n',
        'ev\n',
        'self.w.isAdjustable\n',
        'self.w.distribution.isAdjustable\n',
        'index\n',
        'self.counts\n',
        'self[index]\n',
        's\n',
        'range(self.ndimensions)\n',
        'na.sum(s,axis=0)\n',
        'na.sum(s,axis=0)[...,na.NewAxis]\n',
        'self.c.CPT\n',
        'self.r.distiribution[0,:]\n',
        'self.r.distribution[0,:]\n',
        'tmpr = self.r.distribution[0,:]\n',
        'tmpr.sum()\n',
        'tmpr0 = self.r.distribution[1,:]\n',
        'tmpr0.sum()\n',
        'rCPT[0,:]\n',
        'rCPT[1,:]\n',
        'wCPT[0,:,:]\n',
        'self.s.distribution[:,0]\n',
        'self.s.distribution[:,1]\n',
        'sCPT[:,1]\n',
        'sCPT[:,0]\n',
        'index.items()\n',
        'index.keys()\n',
        'sum(v.distribution.cpt)\n',
        'sum(v.distribution.cpt[:,0])\n',
        'sum(v.distribution.cpt[:,1])\n',
        'v.distribution.cpt\n',
        'sum(v.distribution.cpt[:,0,0])\n',
        'sum(v.distribution.cpt[:,0,1])\n',
        'sum(v.distribution.cpt[:,1,1])\n',
        'sum(v.distribution.cpt[:,1,0])\n',
        'self\n',
        'self.names\n',
        'self.assocdim\n',
        'self.names_list\n',
        'self.c.distribution\n',
        'self.w.distribution.cpt[:,1,1]\n',
        'na.sum(self.w.distribution.cpt[:,1,1])\n',
        'na.sum(self.w.distribution.cpt[:,0,0])\n',
        'na.sum(self.w.distribution.cpt[:,0,1])\n',
        'na.sum(self.w.distribution.cpt[:,1,0])\n',
        'cCPT\n',
        'self.c.distribution.cpt\n',
        'self.s.distribution.cpt\n',
        'sCPT\n',
        'self.r.distribution.cpt\n',
        'rCPT\n',
        'self.w.distribution.cpt\n',
        'wCPT\n'],
                             loc('dist/lib/table.py'): ['self._shape\n',
        'type\n',
        'inarg\n',
        'inargs\n',
        'len(inargs)\n',
        'len(inarg\n',
        ')\n',
        'self.a += 1\n',
        'self.a = 3\n',
        "self.a = ones(names,shape,type='Float32')\n",
        'self.a += na.ones((2,3,4))\n',
        'self.a *= 3\n',
        'self.a[1,1,1] = 4\n',
        'self.a[1,1,1]\n',
        'index\n',
        'self.a[:]\n',
        'self.a[:] = na.ones((2,2,2))\n',
        'self.a[:] *= [1.0/N for N in range(na.product(self.shape))]\n',
        'self.a[:] *= [1.0/N for N in range(na.product(self.a.shape))]\n',
        'self.a[:] *= 1.0/na.product(self.a.shape)\n',
        'self.a\n',
        'na.NewAxis\n',
        'g = na.NewAxis\n',
        'g\n',
        'self.a[...,na.NewAxis]\n',
        'self.a.rank\n',
        'self.names\n',
        'index.items()\n',
        'self.names - set(index.items())\n',
        "len(set(['a']))\n"],
                             loc('temp.py'): ['a\n',
        'a[1,:,1]\n',
        'self\n',
        'arr\n']}
debug.shell-history = {None: ['b = b + b==0\n',
                              'b==0\n',
                              'b == 0\n',
                              'c = b==0\n',
                              'b + c\n',
                              'b = (b+c)\n',
                              'b = (b+(b==0))\n',
                              'L=a.shape[0]\n',
                              'l\n',
                              'L\n',
                              'd=len(a.shape)\n',
                              'd\n',
                              'v = na.ones((d,1))\n',
                              'v[0] = L\n',
                              'v.transpose()\n',
                              'c = na.array(b,v)\n',
                              'v\n',
                              'c = na.array(b,shape=v)\n',
                              'c = na.array(b,shape=(3,1))\n',
                              'e = A / c\n',
                              'e = a / c\n',
                              'e\n',
                              'e[:,0]\n',
                              'na.sum(e[:,1])\n',
                              'na.sum(e[:,0])\n',
                              'na.sum(e[:,2])\n',
                              'a[:,0]\n',
                              'a[:,1]\n',
                              'a[:,2]\n',
                              'a0 = na.sum(a[:,0])\n',
                              'a1 = na.sum(a[:,1])\n',
                              'a2 = na.sum(a[:,2])\n',
                              'a=1\n',
                              'b = array([a0,a1,a2],shape=(3,3))\n',
                              'b = na.array([a0,a1,a2],shape=(3,3))\n',
                              'b = na.array([a0,a1,a2]*3,shape=(3,3))\n',
                              'a / b\n',
                              'na.sum(c[:,0])\n',
                              'na.sum(c[:,1])\n',
                              'na.sum(c[:,2])\n',
                              'b = na.array([a0,a1,a2]*(3,1),shape=(3,3))\n',
                              'a0\n',
                              'a1\n',
                              'a2\n',
                              'na.sum(a,axis=0)\n',
                              'b = na.array(na.sum(a,axis=0)*a.shape[0],shap'\
                              'e=a.shape)\n',
                              'c = na.sum(a,axis=0)\n',
                              'a.shape[0]\n',
                              'b = na.array(c*a.shape[0],shape=a.shape)\n',
                              'b = na.array(c*a.shape[0],shape=(3,3))\n',
                              'c.shae\n',
                              'c = na.reshape(c,shape=(1,3))\n',
                              'c = na.reshape(c,shape=(3,1))\n',
                              'b = na.array(c*3,shape=(3,3))\n',
                              'c*3\n',
                              'list(c)\n',
                              'c.list\n',
                              'c.tolist\n',
                              'c.shape\n',
                              'c = na.reshape(c,shape=(3))\n',
                              'c.tolist()\n',
                              'd = c.tolist()\n',
                              'd * 3\n',
                              'b = na.array(c.tolist()*3,shape=(3,3))\n',
                              'b\n',
                              'a/b\n',
                              'b = na.array(c.tolist()*(3,1),shape=(3,3))\n',
                              'b = na.array(c.tolist(),shape=(3,3))\n',
                              'na.transpose(a,(1,0))\n',
                              'a = na.array(range(12),shape(3,2,2))\n',
                              'a = na.array(range(12),shape=(3,2,2))\n',
                              'na.transpose(a,(1,0,2))\n',
                              'a.shape\n',
                              'b.shape\n',
                              'a = na.array(range(9),shape=(3,3))\n',
                              'b = na.sum(a,axis=1)\n',
                              'c[0,:]\n',
                              'na.sum(c[0,:])\n',
                              "a = na.array(range(9),shape=(3,3),type='Float"\
                              "32')\n",
                              'b.resize(a.shape)\n',
                              'c = a/b\n',
                              'c\n',
                              'c[:,0]\n',
                              'sum(c[:,0]\n',
                              ')\n',
                              'sum(c[:,1])\n',
                              'sum(c[:,2])\n',
                              'a.ndims\n',
                              'a\n',
                              'b = na.sum(a,axis=0)\n',
                              'na.resize(b,a.shape)\n',
                              'log(4)\n',
                              'math.log(4)\n',
                              'eps\n',
                              'mat.eps\n',
                              'math.eps\n',
                              'import numarray as na\n',
                              'na.ieee\n',
                              'import math\n',
                              'math.log(1)\n']}
edit.file-encoding = {loc('dist/lib/learning.py'): 'ISO-8859-1',
                      loc('temp.py'): 'ISO-8859-1'}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'mf5HahoaKCsewhQa8XsON5TyDH'\
        'Vq9Apv',
        'size-state': 'maximized',
        'type': 'dock',
        'view': {'area': 'tall',
                 'current_pages': [0,
                                   0],
                 'notebook_display': 'normal',
                 'notebook_percent': 0.26661392405063289,
                 'override_title': None,
                 'pagelist': [('indent',
                               'tall',
                               2,
                               {}),
                              ('project',
                               'tall',
                               0,
                               {'tree-state': {'tree-states': {'deep': {'col'\
        'umn-widths': [1.0],
        'expanded-nodes': [(0,),
                           (0,
                            1)],
        'selected-nodes': [],
        'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('source-assistant',
                               'tall',
                               2,
                               {'docstring-during-complete': 0,
                                'wrap-lines': 1}),
                              ('browser',
                               'tall',
                               0,
                               {'all_tree_states': {loc('dist/lib/bayesnet.py'): {''\
        'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [[('class def',
                             loc('dist/lib/bayesnet.py'),
                             'BNet')]],
        'top-node': [('class def',
                      loc('dist/lib/bayesnet.py'),
                      'BNet')]},
        loc('../../pbnt/trunk/dist/tests/GraphUnitTest.py'): {'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../../pbnt/trunk/dist/tests/GraphUnitTest.py'),
                      'DBNTestCase')]},
        loc('../../../research/parsemarker.py'): {'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../../research/parsemarker.py'),
                      'R')]},
        loc('../../../../../usr/lib/python2.4/site-packages/numarray/generic.py'): {''\
        'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../../../usr/lib/python2.4/site-packages/numarray/generic.py'),
                      'ClassicUnpickler')]},
        loc('../../../../../usr/lib/python2.4/site-packages/numarray/numarraycore.py'): {''\
        'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../../../../usr/lib/python2.4/site-packages/numarray/numarraycore.py'),
                      'ArrayType')]},
        loc('../../../../../usr/lib/python2.4/site-packages/numarray/ufunc.py'): {''\
        'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../../../../usr/lib/python2.4/site-packages/numarray/ufunc.py'),
                      'CLIP')]},
        loc('../../../../../usr/lib/python2.4/site-packages/pyparsing.py'): {''\
        'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../../../../../usr/lib/python2.4/site-packages/pyparsing.py'),
                      'And')]},
        loc('../../../../../usr/lib/python2.4/unittest.py'): {'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../../../../usr/lib/python2.4/unittest.py'),
                      'False')]}},
                                'browse_mode': u'Current Module',
                                'follow-selection': 0,
                                'sort_mode': 'Alphabetically',
                                'visibility_options': {u'Derived Classes': 0,
        u'Imported': 0,
        u'Modules': 1}})],
                 'primary_view_state': {'area': 'wide',
        'current_pages': [1],
        'notebook_display': 'normal',
        'notebook_percent': 0.47098515519568152,
        'override_title': None,
        'pagelist': [('debug-io',
                      'wide',
                      1,
                      {'first-line': 9984,
                       'selection_end': 106387,
                       'selection_start': 106387}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'first-line': 0,
                       'selection_end': 893,
                       'selection_start': 0}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {'current-domain': 0}),
                     ('debug-modules',
                      'wide',
                      1,
                      None),
                     ('python-shell',
                      'wide',
                      2,
                      {'first-line': 0,
                       'selection_end': 195,
                       'selection_start': 195}),
                     ('search',
                      'wide',
                      0,
                      {'action': 'replace',
                       'file-set': None,
                       'mode': 'file',
                       'options': {'AutoBackground': 1,
                                   'AutoFind': 1,
                                   'AutoShowBatch': 0,
                                   'Fast': 1,
                                   'Incremental': 1,
                                   'InterpretBackslash': 0,
                                   'MatchCase': 1,
                                   'OmitBinary': 1,
                                   'Recursive': 1,
                                   'ReplaceOnDisk': 0,
                                   'Reverse': 0,
                                   'WholeWords': 0,
                                   'Wrapping': 1},
                       'prefix-file': 'short-file',
                       'prefix-lineno': 1,
                       'regex-flags': 44,
                       'replace-entry-expanded': 0,
                       'replace-string': 'normalize',
                       'scope': ['current-file-batch'],
                       'search-entry-expanded': 0,
                       'search-string': 'LL',
                       'search-style': 'text',
                       'starting-directory': '/home/elliot/'}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'column-widths': [0.39944649446494462,
        0.60055350553505538],
                                      'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}})],
        'primary_view_state': {'editor_states': {'bookmarks': ([(loc('../../2.1/trunk/dist/lib/inference.py'),
        {'first-line': 44,
         'selection_end': 2009,
         'selection_start': 2000},
        1139441065.738658),
        (loc('../../2.1/trunk/dist/lib/inference.py'),
         {'first-line': 510,
          'selection_end': 19173,
          'selection_start': 19164},
         1139441066.737474),
        (loc('dist/lib/inference.py'),
         {'first-line': 683,
          'selection_end': 26765,
          'selection_start': 26756},
         1139441088.033772),
        (loc('../../2.1/trunk/dist/lib/inference.py'),
         {'first-line': 510,
          'selection_end': 19173,
          'selection_start': 19164},
         1139441106.4176271),
        (loc('dist/lib/inference.py'),
         {'first-line': 518,
          'selection_end': 19564,
          'selection_start': 19564},
         1139441124.8945971),
        (loc('dist/lib/potentials.py'),
         {'first-line': 95,
          'selection_end': 1210,
          'selection_start': 1210},
         1139441187.765429),
        (loc('dist/lib/inference.py'),
         {'first-line': 518,
          'selection_end': 19564,
          'selection_start': 19564},
         1139441193.0204091),
        (loc('../../2.1/trunk/dist/lib/inference.py'),
         {'first-line': 510,
          'selection_end': 19173,
          'selection_start': 19164},
         1139441270.808023),
        (loc('dist/lib/inference.py'),
         {'first-line': 532,
          'selection_end': 20308,
          'selection_start': 20308},
         1139441272.1818049),
        (loc('dist/lib/potentials.py'),
         {'first-line': 95,
          'selection_end': 1210,
          'selection_start': 1210},
         1139442204.0557289),
        (loc('dist/lib/inference.py'),
         {'first-line': 532,
          'selection_end': 20375,
          'selection_start': 20375},
         1139442207.114989),
        (loc('../../2.1/trunk/dist/lib/inference.py'),
         {'first-line': 510,
          'selection_end': 19173,
          'selection_start': 19164},
         1139515552.9062979),
        (loc('dist/lib/inference.py'),
         {'first-line': 900,
          'selection_end': 20375,
          'selection_start': 20375},
         1139515554.1373191),
        (loc('dist/lib/inference.py'),
         {'first-line': 904,
          'selection_end': 35613,
          'selection_start': 35613},
         1139515584.005173),
        (loc('dist/lib/inference.py'),
         {'first-line': 701,
          'selection_end': 377,
          'selection_start': 377},
         1139515590.7086771),
        (loc('dist/lib/inference.py'),
         {'first-line': 903,
          'selection_end': 35597,
          'selection_start': 35597},
         1139515783.258251),
        (loc('dist/lib/inference.py'),
         {'first-line': 903,
          'selection_end': 35664,
          'selection_start': 35664},
         1139515786.8514659),
        (loc('dist/lib/inference.py'),
         {'first-line': 716,
          'selection_end': 35756,
          'selection_start': 35756},
         1139516784.5270331),
        [loc('../../2.1/trunk/dist/lib/inference.py'),
         {'first-line': 510,
          'selection_end': 19173,
          'selection_start': 19164},
         1139526276.101233],
        [loc('dist/lib/inference.py'),
         {'first-line': 716,
          'selection_end': 35756,
          'selection_start': 35756},
         1139526277.262424]],
        19),
        'current-loc': loc('dist/lib/inference.py'),
        'editor-states': {loc('dist/lib/bayesnet.py'): {'first-line': 158,
        'selection_end': 5712,
        'selection_start': 5712},
                          loc('dist/lib/delegate.py'): {'first-line': 0,
        'selection_end': 21,
        'selection_start': 0},
                          loc('dist/lib/distributions.py'): {'first-line': 189,
        'selection_end': 7521,
        'selection_start': 7521},
                          loc('dist/lib/inference.py'): {'first-line': 716,
        'selection_end': 35756,
        'selection_start': 35756},
                          loc('dist/lib/potentials.py'): {'first-line': 95,
        'selection_end': 1210,
        'selection_start': 1210},
                          loc('dist/lib/table.py'): {'first-line': 172,
        'selection_end': 7088,
        'selection_start': 7088}},
        'has-focus': True},
                               'open_files': [u'dist/lib/bayesnet.py',
        u'dist/lib/delegate.py',
        u'dist/lib/distributions.py',
        u'dist/lib/potentials.py',
        u'dist/lib/table.py',
        u'dist/lib/inference.py']},
        'split_percents': {},
        'splits': 1,
        'tab_location': 'top',
        'user_data': {}},
                 'split_percents': {0: 0.65540540540540537},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (0,
                         0,
                         968,
                         688)}]}
guimgr.recent-documents = [loc('dist/lib/inference.py')]
guimgr.visual-state = {loc('../branches/1.5/trunk/dist/lib/distributions.py'): {''\
        'first-line': 81,
        'selection_end': 3238,
        'selection_start': 3238},
                       loc('unknown:<untitled> #2'): {'first-line': 387,
        'selection_end': 14196,
        'selection_start': 14196},
                       loc('unknown:<untitled> #3'): {'first-line': 0,
        'selection_end': 4,
        'selection_start': 4},
                       loc('unknown:<untitled> #4'): {'first-line': 0,
        'selection_end': 4,
        'selection_start': 4},
                       loc('unknown:<untitled> #5'): {'first-line': 0,
        'selection_end': 4,
        'selection_start': 4},
                       loc('../../../Desktop/nltk_lite-0.6.2/nltk_lite/probability.py'): {''\
        'first-line': 469,
        'selection_end': 13076,
        'selection_start': 13067},
                       loc('../../2.1/trunk/dist/lib/inference.py'): {'first'\
        '-line': 510,
        'selection_end': 19173,
        'selection_start': 19164},
                       loc('../../2.1/trunk/dist/lib/table.py'): {'first-lin'\
        'e': 167,
        'selection_end': 6370,
        'selection_start': 5730},
                       loc('../branches/1.4/trunk/dist/lib/distributions.py'): {''\
        'first-line': 54,
        'selection_end': 0,
        'selection_start': 0},
                       loc('../branches/1.5/trunk/dist/lib/bayesnet.py'): {''\
        'first-line': 64,
        'selection_end': 5522,
        'selection_start': 5522},
                       loc('PyBayes.wpr'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('dist/lib/__init__.py'): {'first-line': 0,
        'selection_end': 26,
        'selection_start': 26},
                       loc('dist/lib/bayesnet.py'): {'first-line': 157,
        'selection_end': 6227,
        'selection_start': 6227},
                       loc('dist/lib/graph/__init__.py'): {'first-line': 0,
        'selection_end': 34,
        'selection_start': 34},
                       loc('dist/lib/graph/setup.py'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('temp.py'): {'first-line': 0,
        'selection_end': 43,
        'selection_start': 43},
                       loc('../../../research/scripts/emgbci/trunk/rip_matcopywrite.py'): {''\
        'first-line': 0,
        'selection_end': 634,
        'selection_start': 634},
                       loc('../../../research/scripts/emgbci/trunk/testing/testrip.py'): {''\
        'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('../../../../../usr/lib/python2.4/site-packages/numarray/generic.py'): {''\
        'first-line': 868,
        'selection_end': 32335,
        'selection_start': 32335},
                       loc('../../../../../usr/lib/python2.4/site-packages/numarray/numarraycore.py'): {''\
        'first-line': 241,
        'selection_end': 7434,
        'selection_start': 7434},
                       loc('../../../../../usr/lib/python2.4/site-packages/numarray/ufunc.py'): {''\
        'first-line': 428,
        'selection_end': 13421,
        'selection_start': 13421},
                       loc('../../../../../usr/lib/python2.4/unittest.py'): {''\
        'first-line': 225,
        'selection_end': 10612,
        'selection_start': 10612}}
proj.env-vars = {None: ('default',
                        ['']),
                 loc('dist/lib/bayesnet.py'): ('project',
        ['']),
                 loc('dist/lib/distributions.py'): ('project',
        ['']),
                 loc('dist/lib/inference.py'): ('project',
        ['']),
                 loc('dist/lib/table.py'): ('project',
        ['']),
                 loc('temp.py'): ('project',
                                  ['']),
                 loc('unknown:<untitled> #6'): ('project',
        [''])}
proj.preferred-indent-style = 'spaces-only'
search.search-history = ['LL',
                         'normalize',
                         'Normalize',
                         'Sample',
                         'normalise',
                         'setCPT',
                         'transpose',
                         'clusters',
                         'Gt',
                         'Moralize',
                         'copy.deepcopy',
                         'copy.deepcoyp',
                         'Gm',
                         'ConstructOptimal',
                         'm',
                         'copy.deep',
                         'copy',
                         'Construct',
                         'Triangulate',
                         'Tria']
