#!wing
#!version=2.0
##################################################################
# Wing IDE project file                                          #
##################################################################
[project attributes]
proj.file-list = [loc('PyBayes.wpr'),
                  loc('dist/doc/PKG-INFO-bayes'),
                  loc('dist/doc/PKG-INFO-graph'),
                  loc('dist/doc/README-bayes.txt'),
                  loc('dist/doc/README-graph.txt'),
                  loc('dist/doc/bayesnet.html'),
                  loc('dist/doc/changes-bayes'),
                  loc('dist/doc/changes-graph'),
                  loc('dist/doc/graph.html'),
                  loc('dist/lib/__init__.py'),
                  loc('dist/lib/bayesnet.py'),
                  loc('dist/lib/delegate.py'),
                  loc('dist/lib/distributions.py'),
                  loc('dist/lib/graph.py'),
                  loc('dist/lib/inference.py'),
                  loc('dist/lib/learning.py'),
                  loc('dist/lib/potentials.py'),
                  loc('dist/lib/setup.py'),
                  loc('dist/lib/setup_local.py'),
                  loc('dist/lib/table.py')]
proj.file-type = 'normal'
[user attributes]
debug.breakpoints = {loc('unknown:<untitled> #1'): {3: (0,
        None,
        1,
        0)},
                     loc('dist/lib/bayesnet.py'): {244: (0,
        None,
        1,
        0)},
                     loc('dist/lib/table.py'): {98: (0,
        None,
        1,
        0)},
                     loc('temp.py'): {3: (0,
        None,
        1,
        0)}}
debug.debug-probe-history = {None: ['tuple([1,2,3])\n',
                                    'a\n'],
                             loc('dist/lib/bayesnet.py'): ['G\n',
        'G.v\n',
        'strIndex\n',
        '"self.cpt["+index+"]=" + repr(value)\n',
        'self.cpt[index]\n',
        'self.cpt.cpt[0,0,0,:]\n',
        'self.cpt.cpt[0,0,0,:] == [-1, -1]\n',
        'self.cpt.cpt[0,0,0,:] == na.array([-1, -1])\n',
        'self.cpt.cpt[1,0,0,:]\n',
        'self.cpt.cpt[1,0,0,:]==na.array([100,100])\n',
        'self.cpt.cpt[1,1,0,:]\n',
        'self.cpt[1,1,0,:]\n',
        'index\n',
        'value\n',
        'self\n',
        'self.in_v()\n',
        'self.in_v\n',
        'e.cpt\n',
        'e\n',
        'vv\n',
        'self.names\n',
        'v\n',
        'v.distribution.cpt\n',
        'c.potential.cpt\n',
        'c.potential.cpt *= v.distribution.cpt\n',
        'v.distribution\n',
        'c.potential = v.distribution\n',
        'c.potential * v.distribution\n',
        'name\n',
        'self.cpt\n',
        'names\n',
        'shape\n',
        'aa*bb\n',
        'self.__class__\n',
        'self.__class__(names,shape,aa*bb)\n',
        'c\n',
        'c.potential\n',
        'c.potential.shape\n',
        'self.potential\n',
        'e.potential\n',
        'newphiR\n',
        'potential\n',
        'oldphiR\n',
        'temp\n',
        'vv.name\n',
        'self.likedict\n',
        'JT.likedict\n'],
                             loc('dist/lib/table.py'): ['self._shape\n',
        'type\n',
        'inarg\n',
        'inargs\n',
        'len(inargs)\n',
        'len(inarg\n',
        ')\n',
        'self.a += 1\n',
        'self.a = 3\n',
        "self.a = ones(names,shape,type='Float32')\n",
        'self.a += na.ones((2,3,4))\n',
        'self.a *= 3\n',
        'self.a[1,1,1] = 4\n',
        'self.a[1,1,1]\n',
        'index\n',
        'self.a[:]\n',
        'self.a[:] = na.ones((2,2,2))\n',
        'self.a[:] *= [1.0/N for N in range(na.product(self.shape))]\n',
        'self.a[:] *= [1.0/N for N in range(na.product(self.a.shape))]\n',
        'self.a[:] *= 1.0/na.product(self.a.shape)\n',
        'self.a\n',
        'na.NewAxis\n',
        'g = na.NewAxis\n',
        'g\n',
        'self.a[...,na.NewAxis]\n',
        'self.a.rank\n'],
                             loc('temp.py'): ['a\n',
        'a[1,:,1]\n',
        'self\n',
        'arr\n']}
debug.err-values = {None: {},
                    loc('dist/lib/bayesnet.py'): {}}
debug.shell-history = {None: ['isinstance(a,ArrayType)\n',
                              'isinstance(a,na.ArrayType)\n',
                              'b = [1,2,3]\n',
                              'isinstance(b,na.ArrayType)\n',
                              's = set(1,2,3,4)\n',
                              's = set((1,2,3,4))\n',
                              's1 = set((3,4))\n',
                              's1 = set(((3,4),))\n',
                              's - s1\n',
                              'a = (3,4)\n',
                              'list(a)\n',
                              'set(a)\n',
                              'set(10\n',
                              ')\n',
                              'set(1)\n',
                              'set(set(a))\n',
                              'import types\n',
                              'isinstance(s,types.ListType)\n',
                              'isinstance(s,types.SequenceType)\n',
                              "set('hello')\n",
                              "set(list('hello'))\n",
                              "set(('hello',))\n",
                              'isinstance(s,types.TupleType)\n',
                              'isinstance(s,Set)\n',
                              'isinstance(s,set)\n',
                              'isinstance(list(s),list)\n',
                              'isinstance(list(s),tuple)\n',
                              'isinstance(tuple(s),tuple)\n',
                              'isinstance(tuple(s),(tuple,list))\n',
                              "set(list('hi','good'))\n",
                              "set(['hi','good'])\n",
                              "list('good')\n",
                              "a = ['good']\n",
                              'set([a])\n',
                              '[a]\n',
                              "a.append('hi')\n",
                              "a.append(['hi','good'])\n",
                              'class table(na.NumArray):\n',
                              '10*10*[2]\n',
                              'product((2,3,4))\n',
                              'mult((2,3,4))\n',
                              'na.product((2,3,4))\n',
                              '24*[1]\n',
                              'enumerate((5,6,7))\n',
                              'print i\n',
                              'for i,j in enumerate((5,6,7)):\n',
                              '\tprint i\n',
                              '\tprint j\n',
                              "dict(enumerate(('a','b','c')))\n",
                              "dict(zip(('a','b','c'),range(3)))\n",
                              "names = ('a','b','c')\n",
                              'dict(zip(names,range(len(names))))\n',
                              'a = na.ones((2,3))\n',
                              'a.__getstate__()\n',
                              'a.ndims\n',
                              'a.size\n',
                              'a.size()\n',
                              'len(a.shape)\n',
                              'a.sinfo\n',
                              'a.sinfo()\n',
                              'a.view\n',
                              'b = a.view()\n',
                              'b = na.sum(b,axis=1)\n',
                              'a.type\n',
                              'NumArray.__new__(NumArray)\n',
                              'na.NumArray.__new__(na.NumArray)\n',
                              'd = na.NumArray.__new__(na.NumArray)\n',
                              'd.__init__(sequence=range(4),shape=(2,2))\n',
                              'd.__init__(range(4),shape=(2,2))\n',
                              'd.__init__(range(4),(2,2))\n',
                              'na.NumArray\n',
                              'a.shape\n',
                              'a.flat\n',
                              "\tprint 'False'\n",
                              'e = na.ones((2,2))\n',
                              'if e:\n',
                              'e=None\n',
                              'else:\n',
                              "\tprint 'False\n",
                              'if e==None:\n',
                              "\tprint 'True'\n",
                              '\telse:\n',
                              "\t\tprint 'False'\n",
                              'a * b\n',
                              'b = ones((2,3))*3\n',
                              'b = na.ones((2,3))*3\n',
                              'c=a*b\n',
                              'c = c*4\n',
                              'c\n',
                              'a\n',
                              'b\n',
                              'import numarray as na\n',
                              'na.alltrue([true,true,true])\n',
                              'na.alltrue([True,True,True])\n',
                              'a = []\n',
                              'a.isempty\n',
                              'a.isempty()\n',
                              'a.empty()\n',
                              's.__class__\n',
                              'a.__class__\n']}
debug.var-col-widths = [0.31578947368421051,
                        0.68421052631578949]
edit.file-encoding = {loc('dist/lib/learning.py'): 'ISO-8859-1',
                      loc('temp.py'): 'ISO-8859-1'}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'mf5HahoaKCsewhQa8XsON5TyDH'\
        'Vq9Apv',
        'size-state': 'maximized',
        'type': 'dock',
        'view': {'area': 'tall',
                 'current_pages': [0,
                                   0],
                 'notebook_display': 'normal',
                 'notebook_percent': 0.26661392405063289,
                 'override_title': None,
                 'pagelist': [('indent',
                               'tall',
                               2,
                               {}),
                              ('project',
                               'tall',
                               0,
                               {'tree-state': {'tree-states': {'deep': {'col'\
        'umn-widths': [1.0],
        'expanded-nodes': [(0,),
                           (0,
                            1)],
        'selected-nodes': [(0,
                            1,
                            0)],
        'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('source-assistant',
                               'tall',
                               2,
                               {'docstring-during-complete': 0,
                                'wrap-lines': 1}),
                              ('browser',
                               'tall',
                               0,
                               {'all_tree_states': {loc('dist/lib/bayesnet.py'): {''\
        'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [[('class def',
                             loc('dist/lib/bayesnet.py'),
                             'BNet')]],
        'top-node': [('class def',
                      loc('dist/lib/bayesnet.py'),
                      'BNet')]},
        loc('../../pbnt/trunk/dist/tests/GraphUnitTest.py'): {'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../../pbnt/trunk/dist/tests/GraphUnitTest.py'),
                      'DBNTestCase')]},
        loc('../../../research/parsemarker.py'): {'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../../research/parsemarker.py'),
                      'R')]},
        loc('../../../../../usr/lib/python2.4/site-packages/numarray/generic.py'): {''\
        'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../../../../usr/lib/python2.4/site-packages/numarray/generic.py'),
                      'ClassicUnpickler')]},
        loc('../../../../../usr/lib/python2.4/site-packages/numarray/numarraycore.py'): {''\
        'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../../../../usr/lib/python2.4/site-packages/numarray/numarraycore.py'),
                      'ArrayType')]},
        loc('../../../../../usr/lib/python2.4/site-packages/numarray/ufunc.py'): {''\
        'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../../../../usr/lib/python2.4/site-packages/numarray/ufunc.py'),
                      'CLIP')]},
        loc('../../../../../usr/lib/python2.4/site-packages/pyparsing.py'): {''\
        'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../../../../../usr/lib/python2.4/site-packages/pyparsing.py'),
                      'And')]},
        loc('../../../../../usr/lib/python2.4/unittest.py'): {'column-widths': [1.0],
        'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../../../../usr/lib/python2.4/unittest.py'),
                      'False')]}},
                                'browse_mode': u'Current Module',
                                'follow-selection': 0,
                                'sort_mode': 'Alphabetically',
                                'visibility_options': {u'Derived Classes': 0,
        u'Imported': 0,
        u'Modules': 1}})],
                 'primary_view_state': {'area': 'wide',
        'current_pages': [6],
        'notebook_display': 'normal',
        'notebook_percent': 0.40391459074733094,
        'override_title': None,
        'pagelist': [('debug-io',
                      'wide',
                      1,
                      {'first-line': 6,
                       'selection_end': 273,
                       'selection_start': 273}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'first-line': 0,
                       'selection_end': 23,
                       'selection_start': 23}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {'current-domain': 0}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'first-line': 18,
                       'selection_end': 966,
                       'selection_start': 966}),
                     ('search',
                      'wide',
                      0,
                      {'action': 'search',
                       'file-set': None,
                       'mode': 'file',
                       'options': {'AutoBackground': 1,
                                   'AutoFind': 1,
                                   'AutoShowBatch': 0,
                                   'Fast': 1,
                                   'Incremental': 1,
                                   'InterpretBackslash': 0,
                                   'MatchCase': 0,
                                   'OmitBinary': 1,
                                   'Recursive': 1,
                                   'ReplaceOnDisk': 0,
                                   'Reverse': 0,
                                   'WholeWords': 0,
                                   'Wrapping': 1},
                       'prefix-file': 'short-file',
                       'prefix-lineno': 1,
                       'regex-flags': 46,
                       'replace-entry-expanded': False,
                       'replace-string': '',
                       'scope': ['open-files'],
                       'search-entry-expanded': False,
                       'search-string': 'likedict',
                       'search-style': 'text',
                       'starting-directory': '/home/elliot/'}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [('eval',
        'na.any(oldphiR.cpt==0)')],
                       'tree-state': {'column-widths': [0.31578947368421051,
        0.68421052631578949],
                                      'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}})],
        'primary_view_state': {'editor_states': {'bookmarks': ([(loc('dist/lib/bayesnet.py'),
        {'first-line': 236,
         'selection_end': 8363,
         'selection_start': 8363},
        1135154182.2985711),
        (loc('dist/lib/inference.py'),
         {'first-line': 497,
          'selection_end': 18887,
          'selection_start': 18887},
         1135154192.3822229),
        (loc('dist/lib/bayesnet.py'),
         {'first-line': 236,
          'selection_end': 8363,
          'selection_start': 8363},
         1135283782.474391),
        (loc('dist/lib/bayesnet.py'),
         {'first-line': 236,
          'selection_end': 8363,
          'selection_start': 8363},
         1135283788.120424),
        (loc('dist/lib/inference.py'),
         {'first-line': 363,
          'selection_end': 18887,
          'selection_start': 18887},
         1135283791.7885561),
        (loc('dist/lib/inference.py'),
         {'first-line': 367,
          'selection_end': 14158,
          'selection_start': 14150},
         1135283972.0932109),
        (loc('dist/lib/bayesnet.py'),
         {'first-line': 236,
          'selection_end': 8363,
          'selection_start': 8363},
         1135283994.084276),
        (loc('dist/lib/bayesnet.py'),
         {'first-line': 236,
          'selection_end': 8363,
          'selection_start': 8363},
         1135284000.841404),
        (loc('dist/lib/inference.py'),
         {'first-line': 367,
          'selection_end': 14158,
          'selection_start': 14150},
         1135284014.517091),
        (loc('dist/lib/bayesnet.py'),
         {'first-line': 38,
          'selection_end': 1711,
          'selection_start': 1711},
         1135284033.0377691),
        (loc('dist/lib/inference.py'),
         {'first-line': 367,
          'selection_end': 14158,
          'selection_start': 14150},
         1135284074.346349),
        (loc('dist/lib/bayesnet.py'),
         {'first-line': 38,
          'selection_end': 1711,
          'selection_start': 1711},
         1135284079.6525221),
        (loc('dist/lib/inference.py'),
         {'first-line': 334,
          'selection_end': 12823,
          'selection_start': 12823},
         1135284083.805037),
        (loc('dist/lib/bayesnet.py'),
         {'first-line': 231,
          'selection_end': 1711,
          'selection_start': 1711},
         1135284092.7324719),
        (loc('dist/lib/inference.py'),
         {'first-line': 359,
          'selection_end': 13838,
          'selection_start': 13838},
         1135284104.2331259),
        (loc('dist/lib/inference.py'),
         {'first-line': 495,
          'selection_end': 18904,
          'selection_start': 18896},
         1135284233.000443),
        (loc('dist/lib/inference.py'),
         {'first-line': 322,
          'selection_end': 12562,
          'selection_start': 12562},
         1135284237.448869),
        (loc('dist/lib/distributions.py'),
         {'first-line': 34,
          'selection_end': 813,
          'selection_start': 813},
         1135284264.1414659),
        (loc('dist/lib/inference.py'),
         {'first-line': 322,
          'selection_end': 12692,
          'selection_start': 12692},
         1135284268.646451),
        [loc('dist/lib/distributions.py'),
         {'first-line': 34,
          'selection_end': 813,
          'selection_start': 813},
         1135284285.7448361]],
        19),
        'current-loc': loc('dist/lib/distributions.py'),
        'editor-states': {loc('dist/lib/bayesnet.py'): {'first-line': 231,
        'selection_end': 1711,
        'selection_start': 1711},
                          loc('dist/lib/delegate.py'): {'first-line': 0,
        'selection_end': 21,
        'selection_start': 0},
                          loc('dist/lib/distributions.py'): {'first-line': 19,
        'selection_end': 813,
        'selection_start': 813},
                          loc('dist/lib/graph.py'): {'first-line': 105,
        'selection_end': 0,
        'selection_start': 0},
                          loc('dist/lib/inference.py'): {'first-line': 322,
        'selection_end': 12692,
        'selection_start': 12692},
                          loc('dist/lib/potentials.py'): {'first-line': 102,
        'selection_end': 3948,
        'selection_start': 3948},
                          loc('dist/lib/table.py'): {'first-line': 75,
        'selection_end': 2910,
        'selection_start': 2910}},
        'has-focus': True},
                               'open_files': [u'dist/lib/delegate.py',
        u'dist/lib/graph.py',
        u'dist/lib/potentials.py',
        u'dist/lib/table.py',
        u'dist/lib/bayesnet.py',
        u'dist/lib/inference.py',
        u'dist/lib/distributions.py']},
        'split_percents': {},
        'splits': 1,
        'tab_location': 'top',
        'user_data': {}},
                 'split_percents': {0: 0.65540540540540537},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (0,
                         0,
                         968,
                         688)}]}
guimgr.recent-documents = [loc('dist/lib/distributions.py'),
                           loc('dist/lib/inference.py'),
                           loc('dist/lib/bayesnet.py')]
guimgr.visual-state = {loc('PyBayes.wpr'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('dist/lib/__init__.py'): {'first-line': 0,
        'selection_end': 26,
        'selection_start': 26},
                       loc('dist/lib/graph/__init__.py'): {'first-line': 0,
        'selection_end': 34,
        'selection_start': 34},
                       loc('dist/lib/graph/setup.py'): {'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('temp.py'): {'first-line': 0,
        'selection_end': 43,
        'selection_start': 43},
                       loc('../../../research/scripts/emgbci/trunk/rip_matcopywrite.py'): {''\
        'first-line': 0,
        'selection_end': 634,
        'selection_start': 634},
                       loc('../../../research/scripts/emgbci/trunk/testing/testrip.py'): {''\
        'first-line': 0,
        'selection_end': 0,
        'selection_start': 0},
                       loc('../../../trunk/dist/lib/distributions.py'): {'fi'\
        'rst-line': 15,
        'selection_end': 0,
        'selection_start': 0},
                       loc('../../../../../usr/lib/python2.4/site-packages/numarray/generic.py'): {''\
        'first-line': 560,
        'selection_end': 20298,
        'selection_start': 20298},
                       loc('../../../../../usr/lib/python2.4/site-packages/numarray/numarraycore.py'): {''\
        'first-line': 385,
        'selection_end': 12460,
        'selection_start': 12449},
                       loc('../../../../../../../usr/lib/python2.4/site-packages/numarray/generic.py'): {''\
        'first-line': 561,
        'selection_end': 20468,
        'selection_start': 20468},
                       loc('unknown:<untitled> #2'): {'first-line': 387,
        'selection_end': 14196,
        'selection_start': 14196},
                       loc('unknown:<untitled> #3'): {'first-line': 0,
        'selection_end': 4,
        'selection_start': 4},
                       loc('unknown:<untitled> #4'): {'first-line': 0,
        'selection_end': 4,
        'selection_start': 4},
                       loc('unknown:<untitled> #5'): {'first-line': 0,
        'selection_end': 4,
        'selection_start': 4},
                       loc('../../../../../usr/lib/python2.4/site-packages/numarray/ufunc.py'): {''\
        'first-line': 428,
        'selection_end': 13421,
        'selection_start': 13421},
                       loc('../../../../../usr/lib/python2.4/unittest.py'): {''\
        'first-line': 405,
        'selection_end': 14943,
        'selection_start': 14943},
                       loc('../../../../../../../usr/lib/python2.4/site-packages/numarray/numarraycore.py'): {''\
        'first-line': 223,
        'selection_end': 6890,
        'selection_start': 6890}}
proj.env-vars = {None: ('default',
                        ['']),
                 loc('dist/lib/bayesnet.py'): ('project',
        ['']),
                 loc('dist/lib/potentials.py'): ('project',
        ['']),
                 loc('dist/lib/table.py'): ('project',
        ['']),
                 loc('unknown:<untitled> #6'): ('project',
        ['']),
                 loc('temp.py'): ('project',
                                  [''])}
proj.preferred-indent-style = 'spaces-only'
search.search-history = ['likedict',
                         'JoinTreePotential(',
                         'JoinTreePotential',
                         'Join',
                         'join',
                         '__getitem__',
                         '__getitem',
                         'NumArray',
                         'equal',
                         'eq',
                         'class',
                         'object',
                         'class MCMCT',
                         'class MCMC',
                         'class ',
                         'class BVertex',
                         'class BV',
                         'class B',
                         'Triangulate',
                         'T']
